{"version":3,"sources":["LineChart.js","BulletChart.js","IFrameChild.js","MachinePage.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","xFieldName","this","props","yFieldName","pointsData","config","title","visible","text","description","desc","xField","yField","seriesField","data","padding","forceFit","label","type","point","size","shape","style","fill","stroke","lineWidth","legend","position","yAxis","React","Component","BulletChart","ranges","configData","forEach","element","push","bulletTitle","measures","bulletMeasure","targets","chartTitle","chartDesc","rangeMax","rangeColors","inIFrame","window","location","parent","iframeChangedHandler","height","doc","cHeight","Math","max","body","clientHeight","documentElement","sHeight","scrollHeight","calcPageHeight","document","parentIFrameNode","getElementById","console","log","domain","onload","addEventListener","event","html","offsetHeight","source","postMessage","Panel","Collapse","axios","require","default","MachinePage","state","chartDataArray","panelTitle","chartConfigs","queryUrl","chartType","min","tickCount","loading","fetchData","bind","fetchCpuData","genQueryTimeRange","panelChanged","IFrameChangeHandler","timestampEnd","floor","Date","now","start","end","step","idx","toString","timestamp","Format","strValue","parseInt","res","result","row","rowIdx","col","colIdx","setState","preState","newState","JSON","parse","stringify","ele","timeRange","url","updateChartLoading2State","get","params","query","then","machineResult","getResultFromResponse","machineDataChart","cpuData","cpuIdx","cpuDataValues","values","cpuName","metric","cpu","pointDate","unixTimestamp2DateFormat","cpuUsage","stringValue2Int","updateChartData2State","catch","err","inputs","unitTranslator","labelAppender","item","totalPromise","input","eleProcessor","dataEle","resIdx","proc","value","appendLabelPart","Promise","all","resArray","totalResult","parseFloat","itemDataValues","sort","ele1","ele2","fetchDataParallel","fetchMemDataParallel","device","fetchDiskIODataParallel","rowObj","fetchMemData","fetchDiskIOData","fetchDiskCapacityData","fetchNetworkIOData","fetchProcCpuTopData","fetchProcMemTopData","setInterval","rowPanels","i","length","cols","chartConfigRow","j","colKey","chartData","key","span","rowKey","rowIdx2Key","header","gutter","defaultActiveKey","onChange","prototype","fmt","o","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","k","test","replace","RegExp","$1","getFullYear","substr","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4c8487ce.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from '@ant-design/charts';\n\nclass LineChart extends React.Component {\n    render() {\n        const xFieldName = this.props.xFieldName;\n        const yFieldName = this.props.yFieldName;\n        const pointsData = this.props.pointsData;\n        const chartTitle = this.props.title;\n        const chartDesc  = this.props.desc;\n        const seriesField = this.props.seriesField;\n\n        const config = {\n            title: {\n                visible: false,\n                text: chartTitle,\n            },\n            description: {\n                visible: true,\n                text: chartDesc,\n            },\n            xField: xFieldName,\n            yField: yFieldName,\n            seriesField,\n            data: pointsData,\n\n            padding: 'auto',\n            forceFit: true,\n            label: {\n                visible: true,\n                type: 'point',\n            },\n            point: {\n                visible: true,\n                size: 2,\n                shape: 'circle',\n                style: {\n                    fill: 'white',\n                    stroke: '#2593fc',\n                    lineWidth: 1,\n                },\n            },\n            legend: { position: 'right-top' },\n            yAxis: this.props.yAxis,\n        };\n\n        return (\n            <div>\n                <Line {...config} />;\n            </div>\n        );\n    }\n}\n\nexport default LineChart;","import React from 'react';\nimport { Bullet } from '@ant-design/charts';\n\nclass BulletChart extends React.Component {\n    render() {\n      let target = 85;\n      let ranges = [ 0, 0.5, 0.85, 1 ];\n      let rangeMax = 100;\n\n      let configData = [];\n      this.props.data.forEach(element => {\n        configData.push({\n          title: element.bulletTitle,\n          measures: [element.bulletMeasure],\n          targets: [target],\n          ranges,\n        })\n      });\n      \n      const config = {\n          title: {\n            visible: false,\n            text: this.props.chartTitle,\n          },\n          description: {\n            visible: true,\n            text: this.props.chartDesc,\n          },\n          data: configData,\n          rangeMax,\n          rangeColors: ['#B4EBBF', '#FFDBA2', '#FFB1AC'],\n          // legend: {\n          //   custom: true,\n          //   items: [\n          //     {\n          //       name: '实际进度',\n          //       marker: {\n          //         symbol: 'square',\n          //         style: { fill: '#5B8FF9' },\n          //       },\n          //     },\n          //     {\n          //       name: '目标值',\n          //       marker: {\n          //         symbol: 'line',\n          //         style: { stroke: '#5B8FF9' },\n          //       },\n          //     },\n          //     {\n          //       name: '差',\n          //       marker: {\n          //         symbol: 'square',\n          //         style: { fill: '#FFB1AC' },\n          //       },\n          //     },\n          //     {\n          //       name: '良',\n          //       marker: {\n          //         symbol: 'square',\n          //         style: { fill: '#FFDBA2' },\n          //       },\n          //     },\n          //     {\n          //       name: '优',\n          //       marker: {\n          //         symbol: 'square',\n          //         style: { fill: '#B4EBBF' },\n          //       },\n          //     },\n          //   ],\n          // },\n        };\n\n      return (\n          <Bullet {...config} />\n      )\n    }\n}\n\nexport default BulletChart;","function inIFrame() { \n    if ( window.location !== window.parent.location ) { \n        return true;\n    } else { \n        return false;\n    } \n}\n\n//  use document.domain to implement cross-domain refs\n// eslint-disable-next-line no-restricted-globals\nif(inIFrame()) {\n    document.domain = 'lgxzj.wiki'\n}\n\n// 计算页面的实际高度，iframe自适应会用到\nfunction calcPageHeight(doc) {\n    var cHeight = Math.max(doc.body.clientHeight, doc.documentElement.clientHeight)\n    var sHeight = Math.max(doc.body.scrollHeight, doc.documentElement.scrollHeight)\n    var height  = Math.max(cHeight, sHeight)\n    return height\n}\n\nfunction iframeChangedHandler() {\n    if (!inIFrame()) {\n        console.log(\"not inside iframe, no need to change iframe size\");\n        return;\n    }\n\n    var height = calcPageHeight(document)\n    \n    // eslint-disable-next-line no-restricted-globals\n    var parentIFrameNode = parent.document.getElementById('ifr');\n    if (parentIFrameNode !== null) {\n        console.log(\"changing parent iframe('ifr') to size:\", height);\n        parentIFrameNode.style.height = height + 'px';\n    }\n}\n\nwindow.onload = iframeChangedHandler;\n\n//  TODO: remove this\nwindow.addEventListener('message', function (event) {\n\n    // Need to check for safety as we are going to process only our messages\n    // So Check whether event with data(which contains any object) contains our message here its \"FrameHeight\"\n   if (event.data === \"FrameHeight\") {\n\n        //event.source contains parent page window object \n        //which we are going to use to send message back to main page here \"abc.com/page\"\n\n        //parentSourceWindow = event.source;\n\n        //Calculate the maximum height of the page\n        var body = document.body;\n        var html = document.documentElement;\n        var height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n\n       // Send height back to parent page \"abc.com/page\"\n        event.source.postMessage({ \"FrameHeight\": height }, \"*\");       \n    }\n});\n\nexport default iframeChangedHandler;","import React from 'react';\nimport { Row, Col,Spin, Collapse, Card } from 'antd';\n\nimport LineChart from './LineChart';\nimport BulletChart from './BulletChart';\nimport IFrameChangeHandler from './IFrameChild';\n\nimport 'antd/dist/antd.css';\n\nconst { Panel } = Collapse;\nconst axios = require('axios').default;\n\nclass MachinePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            xFieldName: \"x\",\n            yFieldName: \"y\",\n            seriesField: 'type',\n            \n            chartDataArray: [\n                {\n                    panelTitle: 'Cpu & Mem',\n                    chartConfigs: [\n                        {\n                            queryUrl: \"http://metric.lgxzj.wiki/api/v1/query_range\",\n                            pointsData: [],\n                            type: 'cpu',\n                            chartType: 'line',\n                            title: \"CPU 负载\",\n                            desc: \"按cpu分组的负载率\",\n                            yAxis: {\n                                visible: true,\n                                min: 0,\n                                max: 110,\n                                tickCount: 5,\n                            },\n                            loading: true,\n                        },\n                        {\n                            queryUrl: \"http://metric.lgxzj.wiki/api/v1/query_range\",\n                            pointsData: [],\n                            type: 'mem',\n                            chartType: 'line',\n                            title: \"内存 负载\",\n                            desc: \"内存资源使用情况，单位MB\",\n                            yAxis: {\n                                visible: true,\n                                min: 0,\n                                max: 4400,\n                                tickCount: 5,\n                            },\n                            loading: true,\n                        },\n                        \n                    ],\n                },\n                {\n                    panelTitle: 'Network',\n                    chartConfigs: [\n                        {\n                            queryUrl: \"http://metric.lgxzj.wiki/api/v1/query_range\",\n                            pointsData: [],\n                            type: 'net_io',\n                            chartType: 'line',\n                            title: \"网络 IO\",\n                            desc: \"网络收发负载，单位KB\",\n                            loading: true,\n                        },\n                    ],\n                },\n                {\n                    panelTitle: 'Disk IO & Caps',\n                    chartConfigs: [\n                        {\n                            queryUrl: \"http://metric.lgxzj.wiki/api/v1/query_range\",\n                            pointsData: [],\n                            type: 'disk_io',\n                            chartType: 'line',\n                            title: \"磁盘 IO\",\n                            desc: \"磁盘读写负载，单位KB\",\n                            // yAxis: {\n                            //     visible: true,\n                            //     min: 0,\n                            //     max: 1024 * 50,\n                            //     tickCount: 5,\n                            // },\n                            loading: true,\n                        },\n                        {\n                            queryUrl: \"http://metric.lgxzj.wiki/api/v1/query_range\",\n                            pointsData: [],\n                            type: 'disk_cap',\n                            chartType: 'line',\n                            title: \"磁盘 容量\",\n                            desc: \"磁盘使用情况，单位GB\",\n                            yAxis: {\n                                visible: true,\n                                min: 0,\n                                max: 100,\n                                tickCount: 5,\n                            },\n                            loading: true,\n                        },\n                        \n                    ],\n                },\n                {\n                    panelTitle: 'Proc Intensives',\n                    chartConfigs: [\n                        {\n                            queryUrl: \"http://metric.lgxzj.wiki/api/v1/query\",\n                            pointsData: [],\n                            type: 'proc_top_cpu',\n                            chartType: 'bullet',\n                            title: \"CPU活跃TOP10\",\n                            desc: \"CPU活跃进程，单位百分比\",\n                            loading: true,\n                        },\n                        {\n                            queryUrl: \"http://metric.lgxzj.wiki/api/v1/query\",\n                            pointsData: [],\n                            type: 'proc_top_mem',\n                            chartType: 'bullet',\n                            title: \"MEM活跃TOP10\",\n                            desc: \"CPU活跃进程，单位百分比\",\n                            loading: true,\n                        }\n                    ]\n                },\n                \n            ],\n        };\n        this.fetchData           = this.fetchData.bind(this);\n        this.fetchCpuData        = this.fetchCpuData.bind(this);\n        this.genQueryTimeRange   = this.genQueryTimeRange.bind(this);\n        this.panelChanged        = this.panelChanged.bind(this);\n    }\n\n    panelChanged() {\n        console.log(\"panel changed\");\n        IFrameChangeHandler();\n    }\n\n    genQueryTimeRange() {\n        const timestampEnd = Math.floor(Date.now() / 1000);\n        const timestampStart = timestampEnd - 5;\n\n        return {\n            start:  timestampStart,\n            end:    timestampEnd,\n            step:   \"1s\",\n        };\n    }\n\n    rowIdx2Key(idx) {\n        return \"row_\" + idx.toString();\n    }\n\n    unixTimestamp2DateFormat(timestamp) {\n        return new Date(timestamp * 1000).Format(\"HH:mm:ss\");\n    }\n\n    stringValue2Int(strValue) {\n        return parseInt(strValue);\n    }\n\n    getResultFromResponse(res) {\n         return res.data.data.result;\n    }\n\n    updateChartData2State(row, rowIdx, col, colIdx, data) {\n        //row[colIdx].pointsData = data;\n        this.setState((preState) => {\n            var newState = JSON.parse(JSON.stringify(preState));\n            const ele = newState.chartDataArray[rowIdx].chartConfigs[colIdx];\n            ele.pointsData = data;\n            ele.loading = false;\n            return newState;\n        });\n    }\n\n    updateChartLoading2State(row, rowIdx, col, colIdx, loading) {\n        this.setState((preState) => {\n            var newState = JSON.parse(JSON.stringify(preState));\n            newState.chartDataArray[rowIdx].chartConfigs[colIdx].loading = loading;\n            return newState;\n        });\n    }\n\n    fetchCpuData(row, rowIdx, col, colIdx) {\n        let timeRange = this.genQueryTimeRange();\n        let url = this.state.chartDataArray[rowIdx].chartConfigs[colIdx].queryUrl;\n\n        this.updateChartLoading2State(row, rowIdx, col, colIdx, true);\n\n        axios.get(url, {\n            params: {\n                ...timeRange,\n                query:  \"100 - (irate(node_cpu_seconds_total{mode=\\\"idle\\\"}[15s]) * 100)\"\n            }\n        })\n            .then( (res) => {\n                var machineResult = this.getResultFromResponse(res);\n\n                const machineDataChart = [];\n                machineResult.forEach((cpuData, cpuIdx) => {\n                    const cpuDataValues = cpuData.values;\n                    const cpuName = cpuData.metric.cpu;\n                    \n                    cpuDataValues.forEach((point) => {\n                        let pointDate = this.unixTimestamp2DateFormat(point[0]);\n                        const cpuUsage = this.stringValue2Int(point[1]);\n                        machineDataChart.push(\n                            {\n                                [this.state.xFieldName]: pointDate,\n                                [this.state.yFieldName]: cpuUsage,\n                                [this.state.seriesField]:\"cpu\" + cpuName,\n                            }\n                        )\n                    })\n                    \n                });\n\n                this.updateChartData2State(row, rowIdx, col, colIdx, machineDataChart);\n            })\n            .catch((err) => {\n                console.log(\"get node metrics failed\", err);\n            });\n    }\n\n\n\n    fetchDataParallel(row, rowIdx, col, colIdx, inputs, unitTranslator, labelAppender) {\n        let timeRange = this.genQueryTimeRange();\n        const item = this.state.chartDataArray[rowIdx].chartConfigs[colIdx];\n        let url = item.queryUrl;\n\n        let loading  = true;\n        this.updateChartLoading2State(row, rowIdx, col, colIdx, loading);\n\n        const totalPromise = [];\n        inputs.forEach((input) => {\n            totalPromise.push(\n                axios.get(\n                    url,\n                    {\n                        params: {\n                            ...timeRange,\n                            query: input.query,\n                        }\n                    })\n            )\n        });\n\n        const eleProcessor = (dataEle, resIdx, proc, pointDate, value) => {\n            if (unitTranslator != null) {\n                value = unitTranslator(value);\n            }\n\n            let label = inputs[resIdx].label;\n            if (labelAppender != null) {\n                let appendLabelPart = labelAppender(dataEle)\n                if (appendLabelPart != null) {\n                    label += (\"_\" + appendLabelPart);\n                }\n            }\n            \n            switch (item.type) {\n                case 'proc_top_mem':\n                case 'proc_top_cpu':\n                    return {\n                            bulletTitle: proc,\n                            bulletMeasure: value,\n                    };\n                    \n                default:\n                    return {\n                            [this.state.xFieldName]: pointDate,\n                            [this.state.yFieldName]: value,\n                            [this.state.seriesField]:label,\n                    };\n            }\n        }\n\n        Promise.all(totalPromise)\n            .then((resArray) => {\n                let totalResult = [];\n\n                resArray.forEach((res, resIdx) => {\n                    var machineResult = this.getResultFromResponse(res);\n                    \n\n                    machineResult.forEach((dataEle) => {\n                        if (item.type === 'proc_top_cpu' || item.type === 'proc_top_mem') {\n                            const proc = dataEle.metric.proc;\n                            let pointDate = this.unixTimestamp2DateFormat(dataEle.value[0]);\n                            let value = parseFloat(dataEle.value[1]);\n\n                            totalResult.push(eleProcessor(dataEle, resIdx, proc, pointDate, value));\n                        } else {\n                            const itemDataValues = dataEle.values;\n                            const proc = null;\n                            \n                            itemDataValues.forEach((point) => {\n                                let pointDate = this.unixTimestamp2DateFormat(point[0]);\n                                let value = this.stringValue2Int(point[1]);\n                                \n                                totalResult.push(eleProcessor(dataEle, resIdx, proc, pointDate, value));\n                            });\n                        }\n                    });\n                })\n\n                if (item.type === 'proc_top_cpu' || item.type === 'proc_top_mem') {\n                    console.log(\"before update\", totalResult);\n                    totalResult.sort((ele1, ele2) => {\n                        return parseInt(ele2.bulletMeasure) - parseInt(ele1.bulletMeasure);\n                    });\n                    // if (totalResult.length < 10) {\n                    //     let j = 0;\n                    //     let len = 10 - totalResult.length;\n                    //     for (j = 0; j < len; ++j) {\n                    //         totalResult.push({\n                    //             bulletTitle: '无',\n                    //             bulletMeasure: 0,\n                    //         });\n                    //     }\n                    // }\n                    console.log(\"after update\", totalResult);\n                }\n                \n                \n                this.updateChartData2State(row, rowIdx, col, colIdx, totalResult);\n            })\n            .catch((err) => {\n                console.log(\"get metrics failed\", err);\n            });\n    }\n\n    fetchMemDataParallel(row, rowIdx, col, colIdx, inputs) {\n        this.fetchDataParallel(\n            row, \n            rowIdx, \n            col, \n            colIdx, \n            inputs, \n            (value) => Math.floor(value / 1024 / 1024),\n            null);\n    }\n\n    fetchMemData(row, rowIdx, col, colIdx) {\n        let machineDataChart = [];\n\n        const inputs = [\n            {\n                query:    \"node_memory_MemTotal_bytes\",\n                label:    \"mem_total\",\n            },\n            {\n                query:      \"node_memory_MemFree_bytes\",\n                label:      \"mem_free\",\n            }\n        ]\n        this.fetchMemDataParallel(row, rowIdx, col, colIdx, inputs, machineDataChart);\n    }\n\n    fetchDiskIODataParallel(row, rowIdx, col, colIdx, inputs) {\n        this.fetchDataParallel(\n            row, \n            rowIdx, \n            col, \n            colIdx, \n            inputs, \n            null,\n            (dataEle) => {\n                if (dataEle.metric.device != null) {\n                    return dataEle.metric.device;\n                }\n                return null;\n            });\n    }\n\n    fetchDiskIOData(row, rowIdx, col, colIdx) {\n        const inputs = [\n            {\n                query:    \"irate(node_disk_written_bytes_total[15s])\",\n                label:    \"written\",\n            },\n            {\n                query:      \"irate(node_disk_read_bytes_total[15s])\",\n                label:      \"read\",\n            },\n            {\n                query:      \"irate(node_textfile_scrape_error[15s])\",\n                label:      \"open_err\",\n            },\n        ]\n        this.fetchDiskIODataParallel(row, rowIdx, col, colIdx, inputs);\n    }\n\n    fetchNetworkIOData(row, rowIdx, col, colIdx) {\n        const inputs = [\n            {\n                query:    \"irate(node_network_receive_bytes_total[15s])\",\n                label:    \"recv\",\n            },\n            {\n                query:    \"irate(node_network_receive_errs_total[15s])\",\n                label:    \"recv_err\",\n            },\n            {\n                query:      \"irate(node_network_transmit_bytes_total[15s])\",\n                label:      \"sent\",\n            },\n            {\n                query:      \"irate(node_network_transmit_errs_total[15s])\",\n                label:      \"sent_err\",\n            }\n        ]\n\n        this.fetchDataParallel(\n            row, \n            rowIdx, \n            col, \n            colIdx, \n            inputs, \n            (value) => Math.floor(value / 1024),\n            (dataEle) => dataEle.metric.device\n        );\n    }\n\n    fetchProcCpuTopData(row, rowIdx, col, colIdx) {\n        const inputs = [\n            {\n                query:    \"ps_pusher_cpu\",\n                label:    \"\",\n            }\n        ];\n        this.fetchDataParallel(\n            row, \n            rowIdx, \n            col, \n            colIdx, \n            inputs, \n            (value) => value,\n            null\n        );\n    }\n\n    fetchProcMemTopData(row, rowIdx, col, colIdx) {\n        const inputs = [\n            {\n                query:    \"ps_pusher_mem\",\n                label:    \"\",\n            }\n        ];\n        this.fetchDataParallel(\n            row, \n            rowIdx, \n            col, \n            colIdx, \n            inputs, \n            (value) => value,\n            null\n        );\n    }\n\n    fetchDiskCapacityData(row, rowIdx, col, colIdx) {\n        const inputs = [\n            {\n                query:    \"node_filesystem_size_bytes\",\n                label:    \"size_total\",\n            },\n            {\n                query:    \"node_filesystem_size_bytes-node_filesystem_avail_bytes\",\n                label:    \"size_used\",\n            },\n            \n        ]\n\n        this.fetchDataParallel(\n            row, \n            rowIdx, \n            col, \n            colIdx, \n            inputs, \n            (value) => Math.floor(value / 1024 / 1024 / 1024),\n            (dataEle) => { return dataEle.metric.device;}\n        );\n    }\n\n    fetchData() {\n        this.state.chartDataArray.forEach((rowObj, rowIdx) => {\n            const row = rowObj.chartConfigs;\n            row.forEach((col, colIdx) => {\n                switch (col.type) {\n                    case \"cpu\":         this.fetchCpuData(row, rowIdx, col, colIdx);            break;\n                    case \"mem\":         this.fetchMemData(row, rowIdx, col, colIdx);            break;\n                    case \"disk_io\":     this.fetchDiskIOData(row, rowIdx, col, colIdx);         break;\n                    case \"disk_cap\":    this.fetchDiskCapacityData(row, rowIdx, col, colIdx);   break;\n                    case \"net_io\":      this.fetchNetworkIOData(row, rowIdx, col, colIdx);      break;\n                    \n                    case 'proc_top_cpu':this.fetchProcCpuTopData(row, rowIdx, col, colIdx);     break;\n                    case 'proc_top_mem':this.fetchProcMemTopData(row, rowIdx, col, colIdx);     break;\n                    \n                    default:        break;\n                }\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.fetchData();\n\n        const oneSecond = 3000;\n        setInterval(this.fetchData, oneSecond);\n    }\n    componentWillUnmount() {\n        \n    }\n\n    render() {\n        const rowPanels = [];\n        for (let i = 0; i < this.state.chartDataArray.length; ++i) {\n            const cols = [];\n\n            const chartConfigRow = this.state.chartDataArray[i].chartConfigs;\n            const panelTitle = this.state.chartDataArray[i].panelTitle;\n            for (let j = 0; j < chartConfigRow.length; ++j) {\n                let colKey = \"col_\" + i.toString() + \"_\" + j.toString();\n                let chartData = chartConfigRow[j];\n\n                if (chartData.chartType === 'line') {\n                    const data = {\n                        xFieldName: this.state.xFieldName,\n                        yFieldName: this.state.yFieldName,\n                        seriesField: this.state.seriesField,\n                        pointsData: chartData.pointsData,\n                        title: chartData.title,\n                        desc: chartData.desc,\n                        yAxis: chartData.yAxis,\n                    }\n    \n                    \n                    cols.push(\n                        <Col key={colKey} span={12} > \n                            <Card title={chartData.title}>\n                                { chartData.loading ? <Spin><LineChart {...data} /></Spin> : <LineChart {...data} /> }\n                            </Card>\n                            \n                        </Col>\n                    );\n                }\n                if (chartData.chartType === 'bullet') {\n                    const config = {\n                        data: chartData.pointsData,\n                        chartTitle: chartData.title,\n                        chartDesc: chartData.desc,\n                    };\n                    cols.push(\n                        <Col key={colKey} span={12} > \n                            <Card title={chartData.title}>\n                                { chartData.loading ? <Spin><BulletChart {...config} /></Spin> : <BulletChart {...config} /> }\n                            </Card>    \n                        </Col>\n                    )\n                }\n            \n            }\n\n            const rowKey = this.rowIdx2Key(i);\n            rowPanels.push(\n                <Panel header={panelTitle} key={rowKey}>\n                    <Row key={rowKey} gutter={[16, 16]}>\n                        {cols}\n                    </Row>\n                </Panel>\n            )\n        }\n\n        return (\n            <div>\n                <Collapse defaultActiveKey={[this.rowIdx2Key(0)]} onChange={this.panelChanged} >\n                    {rowPanels}\n                </Collapse>\n                \n            </div>\n        );\n    }\n}\n\n// 对Date的扩展，将 Date 转化为指定格式的String\n// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， \n// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) \n// 例子： \n// (new Date()).Format(\"yyyy-MM-dd hh:mm:ss.S\") ==> 2006-07-02 08:09:04.423 \n// (new Date()).Format(\"yyyy-M-d h:m:s.S\")      ==> 2006-7-2 8:9:4.18 \nDate.prototype.Format = function (fmt) { //author: meizz \n    var o = {\n        \"M+\": this.getMonth() + 1, //月份 \n        \"d+\": this.getDate(), //日 \n        \"H+\": this.getHours(), //小时 \n        \"m+\": this.getMinutes(), //分 \n        \"s+\": this.getSeconds(), //秒 \n        \"q+\": Math.floor((this.getMonth() + 3) / 3), //季度 \n        \"S\": this.getMilliseconds() //毫秒 \n    };\n    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    for (var k in o)\n    if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n    return fmt;\n}\n\nexport default MachinePage;","import React from 'react';\nimport './App.css';\nimport MachinePage from './MachinePage';\n\nfunction App() {\n  return (\n    <MachinePage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}