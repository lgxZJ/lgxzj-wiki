{"version":3,"sources":["LineChart.js","MachinePage.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","xFieldName","this","props","yFieldName","pointsData","config","title","visible","text","description","desc","xField","yField","data","padding","forceFit","label","type","point","size","shape","style","fill","stroke","lineWidth","React","Component","axios","require","default","MachinePage","state","loading","chartDataArray","url","fetchData","bind","forEach","row","rowIdx","col","colIdx","timestampEnd","Math","floor","Date","now","timestampStart","get","params","start","end","step","query","then","res","console","log","machineDataPrometheus","result","filter","ele","metric","job","values","machineDataChart","push","setState","preState","newState","JSON","parse","stringify","catch","err","error","rows","i","length","cols","j","colKey","toString","key","span","rowKey","gutter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iVAkDeA,E,uKA7CP,IAAMC,EAAaC,KAAKC,MAAMF,WACxBG,EAAaF,KAAKC,MAAMC,WACxBC,EAAaH,KAAKC,MAAME,WAIxBC,EAAS,CACXC,MAAO,CACHC,SAAS,EACTC,KANWP,KAAKC,MAAMI,OAQ1BG,YAAa,CACTF,SAAS,EACTC,KATWP,KAAKC,MAAMQ,MAW1BC,OAAQX,EACRY,OAAQT,EACRU,KAAMT,EAENU,QAAS,OACTC,UAAU,EACVC,MAAO,CACHT,SAAS,EACTU,KAAM,SAEVC,MAAO,CACHX,SAAS,EACTY,KAAM,EACNC,MAAO,UACPC,MAAO,CACHC,KAAM,QACNC,OAAQ,UACRC,UAAW,KAKvB,OACI,6BACI,kBAAC,IAASnB,GADd,S,GAxCYoB,IAAMC,WCKxBC,G,OAAQC,EAAQ,KAASC,SA4JhBC,E,kDAzJX,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IACD6B,MAAQ,CACTC,SAAS,EAEThC,WAAY,IACZG,WAAY,IACZ8B,eAAgB,CACZ,CACI,CACI7B,WAAY,GAGZE,MAAO,mBACPI,KAAM,GACNwB,IAAK,4CAET,CACI9B,WAAY,GAGZE,MAAO,4BACPI,KAAM,GACNwB,IAAK,IAET,CACI9B,WAAY,GAGZE,MAAO,kBACPI,KAAM,GACNwB,IAAK,KAGb,CACI,CACI9B,WAAY,GAGZE,MAAO,kBACPI,KAAM,GACNwB,IAAK,IAET,CACI9B,WAAY,GAGZE,MAAO,4BACPI,KAAM,GACNwB,IAAK,OAKrB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAtDF,E,wDAyDN,IAAD,OACRnC,KAAK8B,MAAME,eAAeI,SAAQ,SAACC,EAAKC,GACpCD,EAAID,SAAQ,SAACG,EAAKC,GAEd,IAAMC,EAAeC,KAAKC,MAAMC,KAAKC,MAAQ,KACvCC,EAAiBL,EAAe,EACtCf,EAAMqB,IAAIR,EAAIN,IAAK,CACfe,OAAQ,CACJC,MAAQH,EACRI,IAAQT,EACRU,KAAQ,KACRC,MAAQ,oFAGXC,MAAM,SAACC,GACJC,QAAQC,IAAIF,GACZ,IACIG,EADgBH,EAAI1C,KAAK8C,OAAOC,QAAO,SAACC,GAAD,MAA4B,kBAAnBA,EAAIC,OAAOC,OACrB,GAAGC,OAEvCC,EAAmB,GACzBP,EAAsBrB,SAAQ,SAACnB,GAAW,IAAD,EACrC+C,EAAiBC,MAAjB,mBAES,EAAKnC,MAAM/B,WAAakB,EAAM,IAFvC,cAGS,EAAKa,MAAM5B,WAAae,EAAM,IAHvC,OAOJoB,EAAIG,GAAQrC,WAAa6D,EAEzB,EAAKE,UAAS,SAACC,GACX,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUJ,IAEzC,OADAC,EAASpC,eAAeM,GAAQE,GAAQrC,WAAa6D,EAC9CI,QAGdI,OAAM,SAACC,GACJlB,QAAQC,IAAI,0BAA2BiB,YAKvD/C,EAAMqB,MACDM,MAAM,SAAAC,OAGNkB,OAAO,SAAAE,S,0CAMZ1E,KAAKkC,c,+EASL,IADA,IAAMyC,EAAO,GACJC,EAAI,EAAGA,EAAI5E,KAAK8B,MAAME,eAAe6C,SAAUD,EAAG,CAEvD,IADA,IAAME,EAAO,GACJC,EAAI,EAAGA,EAAI/E,KAAK8B,MAAME,eAAe4C,GAAGC,SAAUE,EAAG,CAC1D,IAAMnE,EAAO,CACTb,WAAYC,KAAK8B,MAAM/B,WACvBG,WAAYF,KAAK8B,MAAM5B,WACvBC,WAAYH,KAAK8B,MAAME,eAAe4C,GAAGG,GAAG5E,WAC5CE,MAAOL,KAAK8B,MAAME,eAAe4C,GAAGG,GAAG1E,MACvCI,KAAMT,KAAK8B,MAAME,eAAe4C,GAAGG,GAAGtE,MAGtCuE,EAAS,OAASJ,EAAEK,WAAa,IAAMF,EAAEE,WAC7CH,EAAKb,KACD,kBAAC,IAAD,CAAKiB,IAAKF,EAAQG,KAAM,GACpB,kBAAC,EAAcvE,KAK3B,IAAMwE,EAAS,OAASR,EAAEK,WAC1BN,EAAKV,KACD,kBAAC,IAAD,CAAKiB,IAAKE,EAAQC,OAAQ,CAAC,GAAI,KAC1BP,IAKb,OACI,6BACKH,O,GApJSnD,IAAMC,WCAjB6D,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd7B,OAAM,SAAAE,GACLnB,QAAQmB,MAAMA,EAAM4B,c","file":"static/js/main.347787ba.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from '@ant-design/charts';\n\nclass LineChart extends React.Component {\n    render() {\n        const xFieldName = this.props.xFieldName;\n        const yFieldName = this.props.yFieldName;\n        const pointsData = this.props.pointsData;\n        const chartTitle = this.props.title;\n        const chartDesc  = this.props.desc;\n\n        const config = {\n            title: {\n                visible: true,\n                text: chartTitle,\n            },\n            description: {\n                visible: true,\n                text: chartDesc,\n            },\n            xField: xFieldName,\n            yField: yFieldName,\n            data: pointsData,\n\n            padding: 'auto',\n            forceFit: true,\n            label: {\n                visible: true,\n                type: 'point',\n            },\n            point: {\n                visible: true,\n                size: 5,\n                shape: 'diamond',\n                style: {\n                    fill: 'white',\n                    stroke: '#2593fc',\n                    lineWidth: 2,\n                },\n            },\n        };\n\n        return (\n            <div>\n                <Line {...config} />;\n            </div>\n        );\n    }\n}\n\nexport default LineChart;","import React from 'react';\nimport { Row, Col } from 'antd';\n\nimport LineChart from './LineChart';\n\nimport 'antd/dist/antd.css';\n\n\nconst axios = require('axios').default;\n\nclass MachinePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n\n            xFieldName: \"x\",\n            yFieldName: \"y\",\n            chartDataArray: [\n                [\n                    {\n                        pointsData: [\n    \n                        ],\n                        title: \"CPU 负载\",\n                        desc: \"\",\n                        url: \"http://localhost:9090/api/v1/query_range\",\n                    },\n                    {\n                        pointsData: [\n    \n                        ],\n                        title: \"内存 负载\",\n                        desc: \"\",\n                        url: \"\",\n                    },\n                    {\n                        pointsData: [\n    \n                        ],\n                        title: \"网络 IO\",\n                        desc: \"\",\n                        url: \"\",\n                    },\n                ],\n                [\n                    {\n                        pointsData: [\n    \n                        ],\n                        title: \"磁盘 IO\",\n                        desc: \"\",\n                        url: \"\",\n                    },\n                    {\n                        pointsData: [\n    \n                        ],\n                        title: \"磁盘 容量\",\n                        desc: \"\",\n                        url: \"\",\n                    },\n                ]\n            ],\n        };\n        this.fetchData = this.fetchData.bind(this);\n    }\n\n    fetchData() {\n        this.state.chartDataArray.forEach((row, rowIdx) => {\n            row.forEach((col, colIdx) => {\n                \n                const timestampEnd = Math.floor(Date.now() / 1000);\n                const timestampStart = timestampEnd - 5;\n                axios.get(col.url, {\n                    params: {\n                        start:  timestampStart,\n                        end:    timestampEnd,\n                        step:   \"1s\",\n                        query:  \"100-(sum(node_cpu_seconds_total{mode=\\\"idle\\\"})/sum(node_cpu_seconds_total))*100\"\n                    }\n                })\n                    .then( (res) => {\n                        console.log(res);\n                        var machineResult = res.data.result.filter((ele) => ele.metric.job === \"node_exporter\");\n                        var machineDataPrometheus = machineResult[0].values;\n\n                        const machineDataChart = [];\n                        machineDataPrometheus.forEach((point) => {\n                            machineDataChart.push(\n                                {\n                                    [this.state.xFieldName]: point[0],\n                                    [this.state.yFieldName]: point[1]\n                                }\n                            )\n                        })\n                        row[colIdx].pointsData = machineDataChart;\n\n                        this.setState((preState) => {\n                            var newState = JSON.parse(JSON.stringify(preState));\n                            newState.chartDataArray[rowIdx][colIdx].pointsData = machineDataChart;\n                            return newState;\n                        })\n                    })\n                    .catch((err) => {\n                        console.log(\"get node metrics failed\", err);\n                    });\n            })\n        })\n\n        axios.get()\n            .then( res => {\n\n            } )\n            .catch( error => {\n\n            });\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n    componentWillUnmount() {\n        \n    }\n\n    render() {\n\n        const rows = [];\n        for (let i = 0; i < this.state.chartDataArray.length; ++i) {\n            const cols = [];\n            for (let j = 0; j < this.state.chartDataArray[i].length; ++j) {\n                const data = {\n                    xFieldName: this.state.xFieldName,\n                    yFieldName: this.state.yFieldName,\n                    pointsData: this.state.chartDataArray[i][j].pointsData,\n                    title: this.state.chartDataArray[i][j].title,\n                    desc: this.state.chartDataArray[i][j].desc,\n                }\n\n                let colKey = \"col_\" + i.toString() + \"_\" + j.toString();\n                cols.push(\n                    <Col key={colKey} span={8} > \n                        <LineChart {...data} />\n                    </Col>\n                )\n            }\n\n            const rowKey = \"row_\" + i.toString();\n            rows.push(\n                <Row key={rowKey} gutter={[16, 16]}>\n                    {cols}\n                </Row>\n            )\n        }\n\n        return (\n            <div>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default MachinePage;","import React from 'react';\nimport './App.css';\nimport MachinePage from './MachinePage';\n\nfunction App() {\n  return (\n    <MachinePage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}