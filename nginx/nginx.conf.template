
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # disable this, no ned to load core library which cause launch error
    lua_load_resty_core off;
    
    lua_shared_dict	prometheus_metrics 10M;
    lua_package_path	"${install_nginx_lua_prometheus_dir}/?.lua";
    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")
	metric_requests = prometheus:counter(
	    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
	metric_latency = prometheus:histogram(
	    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
	metric_connections = prometheus:gauge(
	    "nginx_http_connections", "Number of HTTP connections", {"state"})
    }
    log_by_lua_block {
        metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
        metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    }

   server {
        listen	${nginx_prometheus_metric_listen_address};
	allow	127.0.0.1;
	deny 	all;
	location /metrics {
	    content_by_lua_block {
	    	metric_connections:set(ngx.var.connections_reading, {"reading"})
		metric_connections:set(ngx.var.connections_waiting, {"waiting"})
		metric_connections:set(ngx.var.connections_writing, {"writing"})
		prometheus:collect()
	    }
	}
    }

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen		80;
	server_name	${react_domain};
	index		index.html;
	root		${install_react_dir};
    }

    upstream prometheus_server {
        server 		localhost:9090;
	keepalive	2000;
    }

    server {
    	listen		80;
	server_name	${metric_domain};

	location / {
	    proxy_pass		http://prometheus_server/;
	    proxy_set_header	Host $host:$server_port;
	}
    }

    upstream prometheus_alertmanager_server {
    	 server		localhost:9200;
	 keepalive	2000;
    }

    server {
    	listen	80;
	server_name	${alert_domain};

	location / {
	    proxy_pass		http://prometheus_alertmanager_server;
	    proxy_set_header	Host $host:$server_port;
	}
    }

    server {
        listen       80;
	server_name  ${blog_domain};
	client_max_body_size 100M;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
	
	index	index.php;
	root	${install_nginx_dir}/html;	

	location / {
	    try_files $uri $uri/  /index.php$args;
	}

	location ~ .*\.php[345]?$ {
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include        fastcgi_params;
	}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}